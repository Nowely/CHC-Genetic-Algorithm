# ๐จโ ะฐะบัะธะฒะฝะพััะธ, ะบะพััะตะปะธัะพะฒะฐะฝะฝัะต ั ะฒะตะบัะพัะพะผ ะดะธะฝะฐะผะธัะตัะบะพะน ัะฐะทะผะตัะฝะพััะธ;
# ๐ฟ"โ" ัะฐัะฐะบัะตัะธััะธะบะธ ะฟะพัะตะฝัะธะฐะปะฐ ััะฐัะตะณะพัั, ะผะฝะพะถะตััะฒะพ ะฒะตัะตััะฒะตะฝะฝัั ัะธัะตะป;
# ๐"โ" ะบะพะผะฟะตัะตะฝัะฝะพัะฝะฐั ะผะพะดะตะปั ะดะธััะธะฟะปะธะฝั, ะผะฝะพะถะตััะฒะพ ะฒะตัะตััะฒะตะฝะฝัั ัะธัะตะป;
# ๐ฎ"โ" ะณะตะฝะพะผ, ะฟัะพัััะฐะฝััะฒะพ ะฟะพะธัะบะฐ ะดะปั ะฟะพัะตะฝัะธะฐะปัะฝัั ัะตัะตะฝะธะน;
# ๐ท^๐ "โ" ะฟะพะฟัะปััะธั t, ัะพััะพััะฐั ะธะท ะผะฝะพะถะตััะฒะพ ะฟะพัะตะฝัะธะฐะปัะฝัั ัะตัะตะฝะธะน, ะพัะพะฑะตะน;
# ๐พ(๐)"โ" ัะตะปะตะฒะฐั ััะฝะบัะธั;
# ๐(๐,๐)"โ" ัะฒัะธััะธะบะฐ, ััะฝะบัะธั ะปะธะฝะตะนะฝะพะน ัะตะณัะตััะธะธ;
# ๐^โ "โ" ะธัะบะพะผะพะต ัะตัะตะฝะธะต, ะพัะพะฑั ั ะพะฟัะตะดะตะปะตะฝะฝัะผ ะฝะฐะฑะพัะพะผ ะณะตะฝะพะฒ;
# ๐๐๐๐๐๐๐๐๐"โ" ะพะฟะตัะฐัะพั ัะตะปะตะบัะธะธ ะดะปั ะพัะฑะพัะฐ ะพัะพะฑะตะน ะฒ ัะปะตะดัััะตะต ะฟะพะบะพะปะตะฝะธะต;
# ๐๐๐๐๐๐๐๐"โ" ะพะฟะตัะฐัะพั ัะบัะตัะธะฒะฐะฝะธั ะดะปั ัะพะทะดะฐะฝะธั ะผะฝะพะถะตััะฒะฐ ะฝะพะฒัั ะพัะพะฑะตะน;
# ๐๐๐๐๐๐๐๐๐ ๐๐๐๐๐๐๐๐"โ" ะพะฟะตัะฐัะพั ะผััะฐัะธะธ, ะฟัะธ ะบะพัะพัะพะผ ะผะตะฝัะตััั ััะตัั ะณะตะฝะพะฒ.

# m - ะบะพะป-ะฒะพ ัะฐัะฐะบัะตัะธััะธะบ
# n - ะบะพะป-ะฒะพ ะดะพัััะฟะฝัั ะฐะบัะธะฒะฝะพััะตะน ะฒ ะฟัะปะต

import numpy as np

class Individual:
 """ ะะปะฐัั ะพะดะฝะพะณะพ ะธะฝะดะธะฒะธะดะฐ ะฒ ะฟะพะฟัะปััะธะธ"""
 def __init__(self, m, n, fitness_function):
  # ะะพัะตะฝัะธะฐะปัะฝะพะต ัะตัะตะฝะธะต (ะณะตะฝะพะผ) - ะฟะตัะฒัะน ัะฐะท ะทะฐะดะฐะตััั ัะปััะฐะนะฝะพ
  self.genome = np.random.randint(0, 2, (m, n), dtype=bool)
  # ะัะธัะฟะพัะพะฑะปะตะฝะฝะพััั ะธะฝะดะธะฒะธะดะฐ
  self.fitness = 0
  # ะะตัะตะดะฐัะฐ ััะฝะบัะธะธ ะฟัะธัะฟะพัะพะฑะปะตะฝะฝะพััะธ (ัะตะปะตะฒะฐั ััะฝะบัะธั)
  self.fitness_function = fitness_function

 def calculate_fitness(self):
  """ ะคัะฝะบัะธั ะดะปั ะฟะตัะตััะตัะฐ ะทะฝะฐัะตะฝะธั ะฟัะธัะฟะพัะพะฑะปะตะฝะฝะพััะธ ะธะฝะดะธะฒะธะดะฐ"""
  self.fitness = self.fitness_function(self.genome)

 def cataclysm_mutation(self):
  """ ะคัะฝะบัะธั ะดะปั ะผััะฐัะธะธ ะธะฝะดะธะฒะธะดะฐ, ะฟัะธ ะบะพัะพัะพะน ะผะตะฝัะตััั ััะตัั ะณะตะฝะพะฒ"""
  # TODO


class Genetic:
 """ ะะปะฐัั, ะพัะฒะตัะฐััะธะน ะทะฐ ัะตะฐะปะธะทะฐัะธั ะณะตะฝะตัะธัะตัะบะพะณะพ ะฐะปะณะพัะธัะผะฐ"""

 def __init__(self,
              numberOfIndividums,
              crossoverRate,
              mutationSteps,
              chanceMutations,
              numberLives,
              function,
              start,
              end):


 def crossing(self, parent1: Individual, parent2: Individual):
  """ ะคัะฝะบัะธั ะดะปั ัะบัะตัะธะฒะฐะฝะธั ะดะฒัั ัะพะดะธัะตะปะตะน """


 def start_genetic(self):
  """ ะะฐะฟััะบ ะพัะฑะพัะฐ"""
